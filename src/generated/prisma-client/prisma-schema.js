module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `enum AccessRole {
  ADMIN
  STUDENT
  PROFESSOR
}

type Address {
  id: ID!
  addr: String
  district: String
  amphoe: String
  province: String
  zipcode: Int
  social: Social
}

input AddressCreateInput {
  id: ID
  addr: String
  district: String
  amphoe: String
  province: String
  zipcode: Int
  social: SocialCreateOneInput
}

input AddressCreateOneInput {
  create: AddressCreateInput
}

input AddressUpdateDataInput {
  addr: String
  district: String
  amphoe: String
  province: String
  zipcode: Int
  social: SocialUpdateOneInput
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AddressWhereUniqueInput
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  addr: String
  addr_not: String
  addr_in: [String!]
  addr_not_in: [String!]
  addr_lt: String
  addr_lte: String
  addr_gt: String
  addr_gte: String
  addr_contains: String
  addr_not_contains: String
  addr_starts_with: String
  addr_not_starts_with: String
  addr_ends_with: String
  addr_not_ends_with: String
  district: String
  district_not: String
  district_in: [String!]
  district_not_in: [String!]
  district_lt: String
  district_lte: String
  district_gt: String
  district_gte: String
  district_contains: String
  district_not_contains: String
  district_starts_with: String
  district_not_starts_with: String
  district_ends_with: String
  district_not_ends_with: String
  amphoe: String
  amphoe_not: String
  amphoe_in: [String!]
  amphoe_not_in: [String!]
  amphoe_lt: String
  amphoe_lte: String
  amphoe_gt: String
  amphoe_gte: String
  amphoe_contains: String
  amphoe_not_contains: String
  amphoe_starts_with: String
  amphoe_not_starts_with: String
  amphoe_ends_with: String
  amphoe_not_ends_with: String
  province: String
  province_not: String
  province_in: [String!]
  province_not_in: [String!]
  province_lt: String
  province_lte: String
  province_gt: String
  province_gte: String
  province_contains: String
  province_not_contains: String
  province_starts_with: String
  province_not_starts_with: String
  province_ends_with: String
  province_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  social: SocialWhereInput
  AND: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateExpertise {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateResearch {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

enum EducationStatus {
  NULL
  STUDYING
  NOTSTUDYING
  GRADUATE
}

type Expertise {
  id: ID!
  title: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExpertiseConnection {
  pageInfo: PageInfo!
  edges: [ExpertiseEdge]!
  aggregate: AggregateExpertise!
}

input ExpertiseCreateInput {
  id: ID
  title: String
  content: String
}

input ExpertiseCreateManyInput {
  create: [ExpertiseCreateInput!]
  connect: [ExpertiseWhereUniqueInput!]
}

type ExpertiseEdge {
  node: Expertise!
  cursor: String!
}

enum ExpertiseOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExpertisePreviousValues {
  id: ID!
  title: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ExpertiseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExpertiseScalarWhereInput!]
  OR: [ExpertiseScalarWhereInput!]
  NOT: [ExpertiseScalarWhereInput!]
}

type ExpertiseSubscriptionPayload {
  mutation: MutationType!
  node: Expertise
  updatedFields: [String!]
  previousValues: ExpertisePreviousValues
}

input ExpertiseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpertiseWhereInput
  AND: [ExpertiseSubscriptionWhereInput!]
}

input ExpertiseUpdateDataInput {
  title: String
  content: String
}

input ExpertiseUpdateInput {
  title: String
  content: String
}

input ExpertiseUpdateManyDataInput {
  title: String
  content: String
}

input ExpertiseUpdateManyInput {
  create: [ExpertiseCreateInput!]
  update: [ExpertiseUpdateWithWhereUniqueNestedInput!]
  upsert: [ExpertiseUpsertWithWhereUniqueNestedInput!]
  delete: [ExpertiseWhereUniqueInput!]
  connect: [ExpertiseWhereUniqueInput!]
  set: [ExpertiseWhereUniqueInput!]
  disconnect: [ExpertiseWhereUniqueInput!]
  deleteMany: [ExpertiseScalarWhereInput!]
  updateMany: [ExpertiseUpdateManyWithWhereNestedInput!]
}

input ExpertiseUpdateManyMutationInput {
  title: String
  content: String
}

input ExpertiseUpdateManyWithWhereNestedInput {
  where: ExpertiseScalarWhereInput!
  data: ExpertiseUpdateManyDataInput!
}

input ExpertiseUpdateWithWhereUniqueNestedInput {
  where: ExpertiseWhereUniqueInput!
  data: ExpertiseUpdateDataInput!
}

input ExpertiseUpsertWithWhereUniqueNestedInput {
  where: ExpertiseWhereUniqueInput!
  update: ExpertiseUpdateDataInput!
  create: ExpertiseCreateInput!
}

input ExpertiseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExpertiseWhereInput!]
}

input ExpertiseWhereUniqueInput {
  id: ID
}

type File {
  id: ID!
  name: String
  hash: String
  size: String
  owner: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  name: String
  hash: String
  size: String
  owner: PostCreateOneWithoutFilesInput!
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutOwnerInput {
  create: [FileCreateWithoutOwnerInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutOwnerInput {
  id: ID
  name: String
  hash: String
  size: String
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hash_ASC
  hash_DESC
  size_ASC
  size_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  name: String
  hash: String
  size: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
}

input FileUpdateDataInput {
  name: String
  hash: String
  size: String
  owner: PostUpdateOneRequiredWithoutFilesInput
}

input FileUpdateInput {
  name: String
  hash: String
  size: String
  owner: PostUpdateOneRequiredWithoutFilesInput
}

input FileUpdateManyDataInput {
  name: String
  hash: String
  size: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyMutationInput {
  name: String
  hash: String
  size: String
}

input FileUpdateManyWithoutOwnerInput {
  create: [FileCreateWithoutOwnerInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutOwnerDataInput {
  name: String
  hash: String
  size: String
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpdateWithWhereUniqueWithoutOwnerInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutOwnerDataInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueWithoutOwnerInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutOwnerDataInput!
  create: FileCreateWithoutOwnerInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  owner: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

scalar Long

type Mutation {
  createExpertise(data: ExpertiseCreateInput!): Expertise!
  updateExpertise(data: ExpertiseUpdateInput!, where: ExpertiseWhereUniqueInput!): Expertise
  updateManyExpertises(data: ExpertiseUpdateManyMutationInput!, where: ExpertiseWhereInput): BatchPayload!
  upsertExpertise(where: ExpertiseWhereUniqueInput!, create: ExpertiseCreateInput!, update: ExpertiseUpdateInput!): Expertise!
  deleteExpertise(where: ExpertiseWhereUniqueInput!): Expertise
  deleteManyExpertises(where: ExpertiseWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createResearch(data: ResearchCreateInput!): Research!
  updateResearch(data: ResearchUpdateInput!, where: ResearchWhereUniqueInput!): Research
  updateManyResearches(data: ResearchUpdateManyMutationInput!, where: ResearchWhereInput): BatchPayload!
  upsertResearch(where: ResearchWhereUniqueInput!, create: ResearchCreateInput!, update: ResearchUpdateInput!): Research!
  deleteResearch(where: ResearchWhereUniqueInput!): Research
  deleteManyResearches(where: ResearchWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  published: Boolean!
  title: String
  content: String
  author: User!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  published: Boolean
  title: String
  content: String
  author: UserCreateOneWithoutPostsInput!
  files: FileCreateManyWithoutOwnerInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  published: Boolean
  title: String
  content: String
  files: FileCreateManyWithoutOwnerInput
}

input PostCreateWithoutFilesInput {
  id: ID
  published: Boolean
  title: String
  content: String
  author: UserCreateOneWithoutPostsInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  published: Boolean!
  title: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutPostsInput
  files: FileUpdateManyWithoutOwnerInput
}

input PostUpdateManyDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  update: PostUpdateWithoutFilesDataInput
  upsert: PostUpsertWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  published: Boolean
  title: String
  content: String
  files: FileUpdateManyWithoutOwnerInput
}

input PostUpdateWithoutFilesDataInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput!
  create: PostCreateWithoutFilesInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  files_some: FileWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  title: String
  content: String
}

type Query {
  expertise(where: ExpertiseWhereUniqueInput!): Expertise
  expertises(where: ExpertiseWhereInput, orderBy: ExpertiseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expertise]!
  expertisesConnection(where: ExpertiseWhereInput, orderBy: ExpertiseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpertiseConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  research(where: ResearchWhereUniqueInput!): Research
  researches(where: ResearchWhereInput, orderBy: ResearchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Research]!
  researchesConnection(where: ResearchWhereInput, orderBy: ResearchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResearchConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Research {
  id: ID!
  title: String
  content: String
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ResearchConnection {
  pageInfo: PageInfo!
  edges: [ResearchEdge]!
  aggregate: AggregateResearch!
}

input ResearchCreateInput {
  id: ID
  title: String
  content: String
  files: FileCreateManyInput
}

input ResearchCreateManyInput {
  create: [ResearchCreateInput!]
  connect: [ResearchWhereUniqueInput!]
}

type ResearchEdge {
  node: Research!
  cursor: String!
}

enum ResearchOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResearchPreviousValues {
  id: ID!
  title: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ResearchScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ResearchScalarWhereInput!]
  OR: [ResearchScalarWhereInput!]
  NOT: [ResearchScalarWhereInput!]
}

type ResearchSubscriptionPayload {
  mutation: MutationType!
  node: Research
  updatedFields: [String!]
  previousValues: ResearchPreviousValues
}

input ResearchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResearchWhereInput
  AND: [ResearchSubscriptionWhereInput!]
}

input ResearchUpdateDataInput {
  title: String
  content: String
  files: FileUpdateManyInput
}

input ResearchUpdateInput {
  title: String
  content: String
  files: FileUpdateManyInput
}

input ResearchUpdateManyDataInput {
  title: String
  content: String
}

input ResearchUpdateManyInput {
  create: [ResearchCreateInput!]
  update: [ResearchUpdateWithWhereUniqueNestedInput!]
  upsert: [ResearchUpsertWithWhereUniqueNestedInput!]
  delete: [ResearchWhereUniqueInput!]
  connect: [ResearchWhereUniqueInput!]
  set: [ResearchWhereUniqueInput!]
  disconnect: [ResearchWhereUniqueInput!]
  deleteMany: [ResearchScalarWhereInput!]
  updateMany: [ResearchUpdateManyWithWhereNestedInput!]
}

input ResearchUpdateManyMutationInput {
  title: String
  content: String
}

input ResearchUpdateManyWithWhereNestedInput {
  where: ResearchScalarWhereInput!
  data: ResearchUpdateManyDataInput!
}

input ResearchUpdateWithWhereUniqueNestedInput {
  where: ResearchWhereUniqueInput!
  data: ResearchUpdateDataInput!
}

input ResearchUpsertWithWhereUniqueNestedInput {
  where: ResearchWhereUniqueInput!
  update: ResearchUpdateDataInput!
  create: ResearchCreateInput!
}

input ResearchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  files_some: FileWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ResearchWhereInput!]
}

input ResearchWhereUniqueInput {
  id: ID
}

type Social {
  id: ID!
  phone: Int
  line_id: String
  facebook: String
  etc: String
}

input SocialCreateInput {
  id: ID
  phone: Int
  line_id: String
  facebook: String
  etc: String
}

input SocialCreateOneInput {
  create: SocialCreateInput
}

input SocialUpdateDataInput {
  phone: Int
  line_id: String
  facebook: String
  etc: String
}

input SocialUpdateOneInput {
  create: SocialCreateInput
  update: SocialUpdateDataInput
  upsert: SocialUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SocialWhereUniqueInput
}

input SocialUpsertNestedInput {
  update: SocialUpdateDataInput!
  create: SocialCreateInput!
}

input SocialWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  line_id: String
  line_id_not: String
  line_id_in: [String!]
  line_id_not_in: [String!]
  line_id_lt: String
  line_id_lte: String
  line_id_gt: String
  line_id_gte: String
  line_id_contains: String
  line_id_not_contains: String
  line_id_starts_with: String
  line_id_not_starts_with: String
  line_id_ends_with: String
  line_id_not_ends_with: String
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  etc: String
  etc_not: String
  etc_in: [String!]
  etc_not_in: [String!]
  etc_lt: String
  etc_lte: String
  etc_gt: String
  etc_gte: String
  etc_contains: String
  etc_not_contains: String
  etc_starts_with: String
  etc_not_starts_with: String
  etc_ends_with: String
  etc_not_ends_with: String
  AND: [SocialWhereInput!]
}

input SocialWhereUniqueInput {
  id: ID
}

type Subscription {
  expertise(where: ExpertiseSubscriptionWhereInput): ExpertiseSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  research(where: ResearchSubscriptionWhereInput): ResearchSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: Address
  role: AccessRole!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  student_status: EducationStatus
  professor_expertise(where: ExpertiseWhereInput, orderBy: ExpertiseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expertise!]
  professor_research(where: ResearchWhereInput, orderBy: ResearchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Research!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: AddressCreateOneInput
  role: AccessRole
  posts: PostCreateManyWithoutAuthorInput
  student_status: EducationStatus
  professor_expertise: ExpertiseCreateManyInput
  professor_research: ResearchCreateManyInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  username: String!
  email: String!
  password: String!
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: AddressCreateOneInput
  role: AccessRole
  student_status: EducationStatus
  professor_expertise: ExpertiseCreateManyInput
  professor_research: ResearchCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  img_url_ASC
  img_url_DESC
  gender_ASC
  gender_DESC
  prefix_ASC
  prefix_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  birthday_ASC
  birthday_DESC
  role_ASC
  role_DESC
  student_status_ASC
  student_status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  role: AccessRole!
  student_status: EducationStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: AddressUpdateOneInput
  role: AccessRole
  posts: PostUpdateManyWithoutAuthorInput
  student_status: EducationStatus
  professor_expertise: ExpertiseUpdateManyInput
  professor_research: ResearchUpdateManyInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  role: AccessRole
  student_status: EducationStatus
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  email: String
  password: String
  img_url: String
  gender: Gender
  prefix: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: AddressUpdateOneInput
  role: AccessRole
  student_status: EducationStatus
  professor_expertise: ExpertiseUpdateManyInput
  professor_research: ResearchUpdateManyInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  img_url: String
  img_url_not: String
  img_url_in: [String!]
  img_url_not_in: [String!]
  img_url_lt: String
  img_url_lte: String
  img_url_gt: String
  img_url_gte: String
  img_url_contains: String
  img_url_not_contains: String
  img_url_starts_with: String
  img_url_not_starts_with: String
  img_url_ends_with: String
  img_url_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  prefix: String
  prefix_not: String
  prefix_in: [String!]
  prefix_not_in: [String!]
  prefix_lt: String
  prefix_lte: String
  prefix_gt: String
  prefix_gte: String
  prefix_contains: String
  prefix_not_contains: String
  prefix_starts_with: String
  prefix_not_starts_with: String
  prefix_ends_with: String
  prefix_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  address: AddressWhereInput
  role: AccessRole
  role_not: AccessRole
  role_in: [AccessRole!]
  role_not_in: [AccessRole!]
  posts_some: PostWhereInput
  student_status: EducationStatus
  student_status_not: EducationStatus
  student_status_in: [EducationStatus!]
  student_status_not_in: [EducationStatus!]
  professor_expertise_some: ExpertiseWhereInput
  professor_research_some: ResearchWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`
      }
    